#!/bin/sh
# /etc/runit/1 - system one-time tasks
#
# This file runs OpenRC up to the "boot" runlevel to get your system into a
# reasonable state. If you need to add system-specific one-shot tasks, consider
# using OpenRC's existing /etc/local.d/ facility via the boot runlevel instead
# of editing this file, as it will be overwritten on upgrades.

SVDIR=/etc/service
PATH=/usr/sbin:/sbin:/usr/bin:/bin
export PATH

# Assume openrc will put the system into a sane state
RUNLEVEL=S openrc sysinit
RUNLEVEL=S openrc boot

# Runit expects $SVDIR to be mutable, which isn't good to do in /etc/ for a
# number of good reasons, but is hard to change due to compatibility reasons.
# We try here to symlink the $SVDIR/**/supervise/ dirs to /run/ so that the
# system still works if the filesystem $SVDIR's on is (or becomes) readonly.
# This is a hacky solution, and the right one would be to put SVDIR in /run/.
runtime_dir="/run/runit"

# This may fail if /run/ also isn't writable, but that's not a fatal error on
# our part.
install -m 0755 -d "${runtime_dir}"

rescue_shell() {
    install -m 0100 /dev/null "${runtime_dir}"/reboot
    cat <<EOF
***
Starting a root rescue shell. After exit, the system will attempt to reboot.
To skip that reboot and attempt to resume the normal boot process,
delete the file '${runtime_dir}/reboot' before exiting the shell.
***
EOF
    /sbin/sulogin
    [ -f "${runtime_dir}"/reboot ] && exit 100
}

# Create shutdown control files (i.e. ln /etc/runit/{reboot,stopit} to /run/)
# In the unlikely event of /run/ being wedged readonly, you'll still be able to
# poweroff, just not reboot.
for control_file in reboot stopit; do
    [ -L "/etc/runit/${control_file}" ] && continue
    rm -fv "/etc/runit/${control_file}"
    ln -Trs "${runtime_dir}/${control_file}" "/etc/runit/${control_file}"
done

# Spawn a login prompt now if "single" is passed on the boot command line.
read -r boot_cmdline </proc/cmdline
case " ${boot_cmdline} " in
    *" single "* )
        RUNLEVEL=S openrc single
        rescue_shell
    ;;
esac

# Transplant each service's ./supervise/ to /run/runit/{,log.}${sv_name}/ to
# avoid filesystem writes in /etc/. On subsequent boots this should be a no-op.
for sv_name in "${SVDIR}"/*; do
    [ -d "${sv_name}" ] || continue # not a dir? weird, best not to touch it
    if [ ! -L "${sv_name}"/supervise ]; then
        rm -rfv "${sv_name}"/supervise &&
        ln -Trs "${runtime_dir}/${sv_name}" "${sv_name}"/supervise
    fi

    [ -d "${sv_name}"/log ] || continue # log dir is optional
    if [ ! -L "${sv_name}"/log/supervise ]; then
        rm -rfv "${sv_name}"/log/supervise &&
        ln -Trs "${runtime_dir}"/log."${sv_name}" "${sv_name}"/log/supervise
    fi
done
